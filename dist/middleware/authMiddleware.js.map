{"version":3,"sources":["../../src/middleware/authMiddleware.js"],"names":["TOKENTIME","SECRET","authenticate","secret","generateAccessToken","req","res","next","token","sign","id","user","expiresIn","respond","status","json","username","checkAdmin","find","email","body","err","account","console","log","message","name","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,YAAY,KAAG,EAAH,GAAM,EAAN,GAAS,EAA3B,C,CAA8B;AAC9B,IAAMC,SAAS,oBAAf;;AAEA,IAAIC,eAAe,0BAAW,EAAEC,QAAQF,MAAV,EAAX,CAAnB;;AAEA,IAAIG,sBAAsB,SAAtBA,mBAAsB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1CF,QAAIG,KAAJ,GAAYH,IAAIG,KAAJ,IAAa,EAAzB;AACAH,QAAIG,KAAJ,GAAY,uBAAIC,IAAJ,CAAS;AACjBC,YAAIL,IAAIM,IAAJ,CAASD;AADI,KAAT,EAETT,MAFS,EAED;AACPW,mBAAWZ;AADJ,KAFC,CAAZ;AAKAO;AACH,CARD;;AAUA,IAAIM,UAAU,SAAVA,OAAU,CAACR,GAAD,EAAMC,GAAN,EAAc;AACxBA,QAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBJ,cAAMN,IAAIM,IAAJ,CAASK,QADE;AAEjBR,eAAOH,IAAIG;AAFM,KAArB;AAIH,CALD;;AAOA;AACA,IAAIS,aAAa,SAAbA,UAAa,CAACZ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,sBAAQW,IAAR,CAAa,EAAEC,OAAMd,IAAIe,IAAJ,CAASD,KAAjB,EAAb,EAAuC,UAACE,GAAD,EAAMC,OAAN,EAAkB;;AAErDC,gBAAQC,GAAR,CAAY,mBAAZ;;AAEA,YAAIH,GAAJ,EAAS;AACL;AACAf,gBAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBU,yBAAS;AADQ,aAArB;AAGH;;AAED,YAAI,CAACH,OAAL,EAAc;AACV;AACAhB,gBAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBU,yBAAS;AADQ,aAArB;AAGH;;AAED,YAAI,CAACd,KAAKe,IAAV,EAAgB;AACZ;AACApB,gBAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBU,yBAAS;AADQ,aAArB;AAGH;;AAED;AACAlB;AAEH,KA5BD;AA6BH,CA9BD;;AAgCAoB,OAAOC,OAAP,GAAiB,EAAE1B,0BAAF,EAAgBE,wCAAhB,EAAqCS,gBAArC,EAA8CI,sBAA9C,EAAjB","file":"authMiddleware.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport expressJwt from 'express-jwt';\nimport mongoose from 'mongoose';\nimport Account from '../model/account';\n\nconst TOKENTIME = 60*60*24*30 //30 days\nconst SECRET = \"Th15 15 th3 S3cr3t\";\n\nlet authenticate = expressJwt({ secret: SECRET });\n\nlet generateAccessToken = (req, res, next) => {\n    req.token = req.token || {};\n    req.token = jwt.sign({\n        id: req.user.id\n    }, SECRET, {\n        expiresIn: TOKENTIME\n    });\n    next();\n}\n\nlet respond = (req, res) => {\n    res.status(200).json({\n        user: req.user.username,\n        token: req.token\n    });\n}\n\n//check admin status\nlet checkAdmin = (req, res, next) => {\n    Account.find({ email:req.body.email }, (err, account) => {\n        \n        console.log(\"In the middleware\");\n\n        if (err) {\n            // return next(err);\n            res.status(401).json({\n                message: 'error'\n            });\n        }\n    \n        if (!account) {\n            //doesn't exist\n            res.status(401).json({\n                message: 'account not found'\n            });\n        }\n        \n        if (!user.name) {\n            //name property doesn't exist... change to admin\n            res.status(401).json({\n                message: 'no name property'\n            });\n        }\n    \n        //hand over to passport\n        next();\n    \n    });\n}\n\nmodule.exports = { authenticate, generateAccessToken, respond, checkAdmin}"]}