{"version":3,"sources":["../../src/controller/dailyChallenge.js"],"names":["DateOnly","require","config","db","api","get","req","res","dateAsInt","parseInt","params","id","date","console","log","toString","toDate","findOne","playdate","err","dailychallenge","send","json","post","body","newDailyChallenge","questions","forEach","newQuestion","question","correctAnswer","answers","newAnswer","answer","push","type","description","save"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;;kBAIe,gBAAoB;AAAA,QAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,QAATC,EAAS,QAATA,EAAS;;;AAE/B,QAAIC,MAAM,sBAAV;;AAEA;AACAA,QAAIC,GAAJ,CAAQ,YAAR,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAEhC,YAAIC,YAAYC,SAASH,IAAII,MAAJ,CAAWC,EAApB,CAAhB;AACA,YAAIC,OAAO,IAAIZ,QAAJ,CAAaQ,SAAb,CAAX;;AAEAK,gBAAQC,GAAR,CAAYF,KAAKG,QAAL,EAAZ;AACAF,gBAAQC,GAAR,CAAYF,KAAKI,MAAL,EAAZ;;AAEA,iCAAeC,OAAf,CAAuB,EAAEC,UAAUN,IAAZ,EAAvB,EAA2C,UAACO,GAAD,EAAMC,cAAN,EAAyB;AAChE,gBAAID,GAAJ,EAAS;AACLZ,oBAAIc,IAAJ,CAASF,GAAT;AACH;AACDZ,gBAAIe,IAAJ,CAASF,cAAT;AACH,SALD;AAOH,KAfD;;AAkBAhB,QAAImB,IAAJ,CAAS,MAAT,EAAiB,UAACjB,GAAD,EAAMC,GAAN,EAAc;;AAE3BM,gBAAQC,GAAR,CAAYR,IAAIkB,IAAhB;;AAEA,YAAIC,oBAAoB,8BAAxB;;AAEA;AACAnB,YAAIkB,IAAJ,CAASE,SAAT,CAAmBC,OAAnB,CAA2B,oBAAY;;AAEnC;AACA,gBAAIC,cAAc,wBAAlB;;AAEA;AACAA,wBAAYC,QAAZ,GAAuBA,SAASA,QAAhC;AACAD,wBAAYE,aAAZ,GAA4BD,SAASC,aAArC;;AAEA;AACAD,qBAASE,OAAT,CAAiBJ,OAAjB,CAAyB,kBAAU;;AAE/B;AACA,oBAAIK,YAAY,sBAAhB;AACAA,0BAAUC,MAAV,GAAmBA,OAAOA,MAA1B;;AAEA;AACAL,4BAAYG,OAAZ,CAAoBG,IAApB,CAAyBF,SAAzB;AAEH,aATD;;AAWAP,8BAAkBC,SAAlB,CAA4BQ,IAA5B,CAAiCN,WAAjC;AAEH,SAvBD;;AAyBA;;AAEAH,0BAAkBU,IAAlB,GAAyB7B,IAAIkB,IAAJ,CAASW,IAAlC;AACAV,0BAAkBW,WAAlB,GAAgC9B,IAAIkB,IAAJ,CAASY,WAAzC;;AAEA;AACA,YAAIxB,OAAO,IAAIZ,QAAJ,CAAaM,IAAIkB,IAAJ,CAASN,QAAtB,CAAX;AACA;AACAO,0BAAkBP,QAAlB,GAA6BN,IAA7B;;AAEAC,gBAAQC,GAAR,CAAY,oBAAZ,EAAkCR,IAAIkB,IAAJ,CAASN,QAA3C;AACAL,gBAAQC,GAAR,CAAY,sBAAZ,EAAoCF,IAApC;;AAEAa,0BAAkBY,IAAlB,CAAuB,eAAO;AAC1B,gBAAIlB,GAAJ,EAAS;AACLZ,oBAAIc,IAAJ,CAASF,GAAT;AACH;AACDZ,gBAAIc,IAAJ,CAASI,iBAAT;AACH,SALD;AAMH,KAnDD;;AAqDA,WAAOrB,GAAP;AAEH,C","file":"dailyChallenge.js","sourcesContent":["import { Router } from 'express';\nimport DailyChallenge from '../model/dailyChallenge';\nimport Answer from '../model/answer';\nimport Question from '../model/question';\n\nvar DateOnly = require('dateonly');\n\n\n\nexport default ({ config, db }) => {\n\n    let api = Router()\n\n    //Date as YEAR MONTH DAY 20180313 3/13/2018\n    api.get('/today/:id', (req, res) => {\n\n        var dateAsInt = parseInt(req.params.id)\n        var date = new DateOnly(dateAsInt)\n\n        console.log(date.toString())\n        console.log(date.toDate())\n\n        DailyChallenge.findOne({ playdate: date} , (err, dailychallenge) => {\n            if (err) {\n                res.send(err);\n            }\n            res.json(dailychallenge);\n        });\n\n    });\n\n\n    api.post('/add', (req, res) => {\n\n        console.log(req.body)\n\n        let newDailyChallenge = new DailyChallenge();\n\n        //loop over questions in body\n        req.body.questions.forEach(question => {\n            \n            //create question\n            let newQuestion = new Question()\n            \n            //assign q and a\n            newQuestion.question = question.question\n            newQuestion.correctAnswer = question.correctAnswer\n\n            //create answers\n            question.answers.forEach(answer => {\n\n                //create new answer\n                let newAnswer = new Answer()\n                newAnswer.answer = answer.answer\n\n                //assign embedded answer\n                newQuestion.answers.push(newAnswer)\n\n            });\n\n            newDailyChallenge.questions.push(newQuestion)\n\n        });\n\n        //assign type, description and date\n        \n        newDailyChallenge.type = req.body.type\n        newDailyChallenge.description = req.body.description\n        \n        // var date = new DateOnly(20180313)\n        var date = new DateOnly(req.body.playdate)\n        //var date = new DateOnly(eq.body.playdate)\n        newDailyChallenge.playdate = date\n\n        console.log(\"****** POSTED DATE\", req.body.playdate)\n        console.log(\"****** ASSIGNED DATE\", date)\n\n        newDailyChallenge.save(err => {\n            if (err) {\n                res.send(err)\n            }\n            res.send(newDailyChallenge)\n        });\n    });\n\n    return api;\n\n}"]}