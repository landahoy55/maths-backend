{"version":3,"sources":["../../src/controller/apns.js"],"names":["apn","require","config","db","api","post","req","res","options","token","key","keyId","teamId","production","apnProvider","Provider","notification","Notification","expiry","Math","floor","Date","now","alert","topic","sound","deviceToken","send","then","result","sent","forEach","console","log","failed","failure","error","status","response"],"mappings":";;;;;;AAAA;;AACA,IAAIA,MAAMC,QAAQ,KAAR,CAAV;;kBAGe,gBAAoB;AAAA,QAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,QAATC,EAAS,QAATA,EAAS;;;AAE/B,QAAIC,MAAM,sBAAV;;AAEAA,QAAIC,IAAJ,CAAS,OAAT,EAAkB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5B;;AAEA;AACA,YAAIC,UAAU;AACVC,mBAAO;AACHC,qBAAK,eADF;AAEHC,uBAAO,YAFJ;AAGHC,wBAAQ;AAHL,aADG;AAMVC,wBAAY;;AAGhB;AATc,SAAd,CAUA,IAAIC,cAAc,IAAId,IAAIe,QAAR,CAAiBP,OAAjB,CAAlB;;AAEA;AACA,YAAIQ,eAAe,IAAIhB,IAAIiB,YAAR,EAAnB;AACA;AACAD,qBAAaE,MAAb,GAAsBC,KAAKC,KAAL,CAAWC,KAAKC,GAAL,KAAa,IAAxB,IAAgC,IAAtD,CAnB4B,CAmBgC;AAC5DN,qBAAaO,KAAb,GAAqB,MAArB;AACAP,qBAAaQ,KAAb,GAAqB,0BAArB;AACAR,qBAAaS,KAAb,GAAqB,WAArB;;AAEA,YAAIC,cAAc,kEAAlB;;AAEAZ,oBAAYa,IAAZ,CAAiBX,YAAjB,EAA+BU,WAA/B,EAA4CE,IAA5C,CAAkD,UAACC,MAAD,EAAY;AAC1D;AACAA,mBAAOC,IAAP,CAAYC,OAAZ,CAAqB,UAACtB,KAAD,EAAW;AAC5BuB,wBAAQC,GAAR,CAAY,SAAZ,EAAuBxB,KAAvB;AACA;AACH,aAHD;;AAKA;AACAoB,mBAAOK,MAAP,CAAcH,OAAd,CAAsB,UAACI,OAAD,EAAa;AAC/B,oBAAIA,QAAQC,KAAZ,EAAmB;AACfJ,4BAAQC,GAAR,CAAY,uCAAZ;AACH,iBAFD,MAEO;AACHD,4BAAQC,GAAR,CAAYE,QAAQE,MAApB;AACAL,4BAAQC,GAAR,CAAYE,QAAQG,QAApB;AACH;AACJ,aAPD;AAQH,SAhBD;AAiBH,KA3CD;;AA6CA,WAAOlC,GAAP;AAEH,C","file":"apns.js","sourcesContent":["import { Router } from 'express';\nvar apn = require('apn');\n\n\nexport default ({ config, db }) => {\n\n    let api = Router();\n\n    api.post('/test', (req, res) => {\n        //post notification\n        \n        //set up options\n        var options = {\n            token: {\n                key: \"297Q6R63U6.p8\",\n                keyId: \"297Q6R63U6\",\n                teamId: \"6YRYEG2DL8\"\n            },\n            production: false\n        }\n\n        //only one instance of provider required\n        var apnProvider = new apn.Provider(options);\n        \n        //create a notification\n        var notification = new apn.Notification();\n        //set bits\n        notification.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.\n        notification.alert = \"Test\";\n        notification.topic = \"com.landahoy55.maths-app\";\n        notification.sound = \"ping.aiff\"\n\n        let deviceToken = \"719E021E48CC4735CC1595C504AB8ADDFDA8609498FC6FC0D14A0CA89716A93F\"\n\n        apnProvider.send(notification, deviceToken).then( (result) => {\n            //response.sent is array containing successful device tokens\n            result.sent.forEach( (token) => {\n                console.log(\"Sent ok\", token)\n                // notificationSent(user, token)\n            });\n\n            //response.failed is array of objects containing failed tokens and errors\n            result.failed.forEach((failure) => {\n                if (failure.error) {\n                    console.log(\"Unable to send - likely network issue\")\n                } else {\n                    console.log(failure.status)\n                    console.log(failure.response)\n                }\n            })\n        });\n    });\n\n    return api;\n\n}"]}