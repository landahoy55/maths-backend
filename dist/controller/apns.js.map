{"version":3,"sources":["../../src/controller/apns.js"],"names":["apn","require","config","db","api","post","req","res","update","body","device","$setOnInsert","upsert","err","send","options","token","key","keyId","teamId","production","apnProvider","Provider","notification","Notification","expiry","Math","floor","Date","now","alert","topic","sound","devicesToNotify","find","devices","forEach","console","log","deviceid","push","then","result","sent","message","failed","failure","error","status","response","shutdown"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA;AACA,IAAIA,MAAMC,QAAQ,KAAR,CAAV;;kBAEe,gBAAoB;AAAA,QAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,QAATC,EAAS,QAATA,EAAS;;;AAE/B,QAAIC,MAAM,sBAAV;;AAGA;AACA;AACA;AACA;AACAA,QAAIC,IAAJ,CAAS,YAAT,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAEjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,2BAAOC,MAAP,CAAc,EAAC,YAAWF,IAAIG,IAAJ,CAASC,MAArB,EAAd,EACc,EAACC,cAAc,EAAC,YAAWL,IAAIG,IAAJ,CAASC,MAArB,EAAf,EADd,EAEc,EAACE,QAAQ,IAAT,EAFd,EAGc,UAASC,GAAT,EAAcH,MAAd,EAAqB;AACjB,gBAAIG,GAAJ,EAAS;AACLN,oBAAIO,IAAJ,CAASD,GAAT;AACH;AACDN,gBAAIO,IAAJ,CAASJ,MAAT;AACH,SARf;;AAUA;;AAEA;;AAGH,KA3CD;;AA6CA;AACA;AACA;AACA;AACA;AACAN,QAAIC,IAAJ,CAAS,OAAT,EAAkB,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAE5B;AACA,YAAIQ,UAAU;AACVC,mBAAO;AACHC,qBAAK,sBADF;AAEHC,uBAAO,YAFJ;AAGHC,wBAAQ;AAHL,aADG;AAMVC,wBAAY;;AAGhB;AATc,SAAd,CAUA,IAAIC,cAAc,IAAIrB,IAAIsB,QAAR,CAAiBP,OAAjB,CAAlB;;AAEA;AACA,YAAIQ,eAAe,IAAIvB,IAAIwB,YAAR,EAAnB;AACA;AACAD,qBAAaE,MAAb,GAAsBC,KAAKC,KAAL,CAAWC,KAAKC,GAAL,KAAa,IAAxB,IAAgC,IAAtD,CAlB4B,CAkBgC;AAC5DN,qBAAaO,KAAb,GAAqBxB,IAAIG,IAAJ,CAASqB,KAA9B;AACAP,qBAAaQ,KAAb,GAAqB,0BAArB;AACAR,qBAAaS,KAAb,GAAqB,WAArB;;AAEA;AACA,YAAIC,kBAAkB,EAAtB;;AAEA,2BAAOC,IAAP,CAAY,EAAZ,EAAgB,UAACrB,GAAD,EAAMsB,OAAN,EAAkB;AAC9B;;AAEAA,oBAAQC,OAAR,CAAgB,UAAC1B,MAAD,EAAY;AACxB2B,wBAAQC,GAAR,CAAY,cAAZ,EAA4B5B,OAAO6B,QAAnC;AACAN,gCAAgBO,IAAhB,CAAqB9B,OAAO6B,QAA5B;AACH,aAHD;;AAKAF,oBAAQC,GAAR,CAAY,OAAZ,EAAqBL,eAArB;;AAEIZ,wBAAYP,IAAZ,CAAiBS,YAAjB,EAA+BU,eAA/B,EAAgDQ,IAAhD,CAAsD,UAACC,MAAD,EAAY;AAClE;AACIA,uBAAOC,IAAP,CAAYP,OAAZ,CAAqB,UAACpB,KAAD,EAAW;AAC5BqB,4BAAQC,GAAR,CAAY,SAAZ,EAAuBtB,KAAvB;AACAT,wBAAIO,IAAJ,CAAS,EAAC8B,SAAS,MAAV,EAAT;AACH,iBAHD;;AAKA;AACAF,uBAAOG,MAAP,CAAcT,OAAd,CAAsB,UAACU,OAAD,EAAa;AAC/B,wBAAIA,QAAQC,KAAZ,EAAmB;AACfV,gCAAQC,GAAR,CAAY,uCAAZ;AACH,qBAFD,MAEO;AACHD,gCAAQC,GAAR,CAAYQ,QAAQE,MAApB;AACAX,gCAAQC,GAAR,CAAYQ,QAAQG,QAApB;AACH;AACJ,iBAPD;;AASA5B,4BAAY6B,QAAZ;AACP,aAlBG;AAmBP,SA7BD;AA8BH,KAxDD;;AA0DA,WAAO9C,GAAP;AAEH,C","file":"apns.js","sourcesContent":["import { Router } from 'express';\nimport Device from '../model/deviceid';\n\n//import package\nvar apn = require('apn');\n\nexport default ({ config, db }) => {\n\n    let api = Router();\n\n\n    //Record device ID\n    //When user accepts notifications record device ID in db\n    //Anonymised, everyone get the messages - amend Account model if any logic needs to happen\n    //Handle dupliactes here.\n    api.post('/deviceids', (req, res) => {\n\n        //will create duplicates...\n        // let newDeviceID = new Device();\n        // newDeviceID.deviceid = req.body.device\n\n        // newDeviceID.save(err => {\n        //     if (err) {\n        //         res.send(err);\n        //     }\n        //     res.send({message:\"recorded\"})\n        // });\n        \n        \n\n        // Device.findOneAndUpdate({\"deviceid\":req.body.device},\n        //                         {\"$set\": { \"deviceid\": req.body.device}},\n        //                         {\"upsert\": true, 'new': true},\n        //                         function(err, doc) {\n        //                             if (err) {\n        //                                 res.send(err)\n        //                             }\n        //                             res.send(doc)\n        //                         });\n                            \n\n        //will not add duplicate records\n        //Only \n        Device.update({'deviceid':req.body.device},\n                      {$setOnInsert: {'deviceid':req.body.device}},\n                      {upsert: true},\n                      function(err, device){\n                          if (err) {\n                              res.send(err)\n                          }\n                          res.send(device)\n                      });\n\n        //findOneAndUpdate along with upsert will check for dupes\n\n        // will save  duplicates if a device deletes app and install again...\n  \n\n    });\n\n    //Send a push notification - with alert as a JSON body\n    //TODO: Loop over device collection\n    //Guidance on multiple devices - https://github.com/node-apn/node-apn/issues/128\n    //EventEmmitter Memory leak - http://www.jongleberry.com/understanding-possible-eventemitter-leaks.html\n    //Possibly change to a different package? at the bottom https://github.com/node-apn/node-apn/issues/518\n    api.post('/send', (req, res) => {\n        \n        //set up options\n        var options = {\n            token: {\n                key: \"./dist/297Q6R63U6.p8\",\n                keyId: \"297Q6R63U6\",\n                teamId: \"6YRYEG2DL8\"\n            },\n            production: false\n        }\n\n        //only one instance of provider required\n        var apnProvider = new apn.Provider(options);\n        \n        //create a notification\n        var notification = new apn.Notification();\n        //set bits\n        notification.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.\n        notification.alert = req.body.alert\n        notification.topic = \"com.landahoy55.maths-app\";\n        notification.sound = \"ping.aiff\"\n\n        //Find all device tokens - duplicates handled on creation\n        var devicesToNotify = [];\n        \n        Device.find({}, (err, devices) => {\n            //loop over decives add to array\n            \n            devices.forEach((device) => {\n                console.log(\"Device id...\", device.deviceid)\n                devicesToNotify.push(device.deviceid)\n            })\n        \n            console.log(\"ARRAY\", devicesToNotify);\n\n                apnProvider.send(notification, devicesToNotify).then( (result) => {\n                //response.sent is array containing successful device tokens\n                    result.sent.forEach( (token) => {\n                        console.log(\"Sent ok\", token)\n                        res.send({message: \"sent\"});\n                    });\n\n                    //response.failed is array of objects containing failed tokens and errors\n                    result.failed.forEach((failure) => {\n                        if (failure.error) {\n                            console.log(\"Unable to send - likely network issue\")\n                        } else {\n                            console.log(failure.status)\n                            console.log(failure.response)\n                        }\n                    });\n\n                    apnProvider.shutdown()\n            });\n        });\n    });\n\n    return api;\n\n}"]}